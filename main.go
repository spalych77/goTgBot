package main

import (
	"fmt"
	"log"
	"os"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var gBot *tgbotapi.BotAPI
var gToken string
var gChatId int64

var gUsersInChat Users

var gUsefulActivities = Activities{
	// —ç—Ç–æ –±—Ä—É–∫–ª–∏–Ω)
	{"skip", "–ü—Ä–æ–≥—É–ª—è—Ç—å –ø–∞—Ä—ã (80 –º–∏–Ω—É—Ç)", 5},
	{"buy_beer", "–°–≥–æ–Ω—è—Ç—å –∑–∞ –ø–∏–≤–æ–º –¥–ª—è –ú–†–ö (10 –º–∏–Ω—É—Ç)", 7},
	{"cheating", "–°–ø–∏—Å–∞—Ç—å (20 –º–∏–Ω—É—Ç)", 4},
	{"expell", "–û—Ç—á–∏—Å–ª–∏—Ç—å—Å—è", 100},
	{"cross_road", "–ü–µ—Ä–µ–π—Ç–∏ –¥–æ—Ä–æ–≥—É –≤ –Ω–µ–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–º –º–µ—Å—Ç–µ (10 —Å–µ–∫—É–Ω–¥)", 6},
	{"sitting", "–û—Ç—Å–∏–¥–µ—Ç—å –ø–∞—Ä—É –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å", 2},

	//—á—ë –∑–∞ –±–∏–∑–Ω–µ—Å
	{"attend_courses", "–ü–æ—Å–µ—Ç–∏—Ç—å –∫—É—Ä—Å—ã (–ø–∞—Ä—É –¥–Ω–µ–π)", 3},
	{"loan", "–î–∞—Ç—å –∫–µ–Ω—Ç—É 200 —Ä—É–±–ª–µ–π –≤ —Å—Ç–æ–ª–æ–≤—É—é (–ø–∞—Ä—É —Å–µ–∫)", 5},
	{"help", "–î–∞—Ç—å –∫–µ–Ω—Ç—É —Å–ø–∏—Å–∞—Ç—å", 3},
	{"project", "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç (–Ω–µ—Å–æ–ª—å–∫–æ —á–∞—Å–æ–≤)", 7},
	{"cleaning", "–£–±—Ä–∞—Ç—å—Å—è –≤ –∫–∞–±–∏–Ω–µ—Ç–µ (10 –º–∏–Ω—É—Ç)", 2},
	{"reading", "–ü—Ä–æ—á–µ—Å—Ç—å —Å—Ç–∞—Ç—å–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ (1 —á–∞—Å)", 1},
}

var gRewards = Activities{
	// —ç—Ç–æ –±—Ä—É–∫–ª–∏–Ω)
	{"cigarette", "–ö—É–ø–∏—Ç—å –ø–∞—á–∫—É —Å–∏–∂–µ–∫", 100},
	{"beer", "–ö—É–ø–∏—Ç—å –ø–∏–≤–∫–∞", 100},
	{"hookah", "–°—Ö–æ–¥–∏—Ç—å —Å –∫–µ–Ω—Ç–∞–º–∏ –≤ –ø–∞—Ä–∏–ª–∫—É", 150},

	// —á—ë –∑–∞ –±–∏–∑–Ω–µ—Å
	{"buy_courses", "–ö—É–ø–∏—Ç—å –∫—É—Ä—Å—ã", 60},
	{"friends", "–°—Ö–æ–¥–∏—Ç—å —Å –¥—Ä—É–∑—å—è–º–∏ –∫—É–¥–∞-–Ω–∏–±—É–¥—å", 40},
	{"business", "–û—Ç–∫—Ä—ã—Ç—å –±–∏–∑–Ω–µ—Å", 200},
}

type User struct {
	id    int64
	name  string
	coins uint16
}
type Users []*User

type Activity struct {
	code, name string
	coins      uint16
}
type Activities []*Activity

func init() {
	// Uncomment and update token value to set environment variable for Telegram Bot Token given by BotFather.
	// Delete this line after setting the env var. Keep the token out of the public domain!
	_ = os.Setenv(TOKEN_NAME_IN_OS, "6409293985:AAEpyGRZnCJLD_Of6kjiP7sOSI15ThwfOaA")

	if gToken = os.Getenv(TOKEN_NAME_IN_OS); gToken == "" {
		panic(fmt.Errorf(`failed to load environment variable "%s"`, TOKEN_NAME_IN_OS))
	}

	var err error
	if gBot, err = tgbotapi.NewBotAPI(gToken); err != nil {
		log.Panic(err)
	}
	gBot.Debug = true
}

func isStartMessage(update *tgbotapi.Update) bool {
	return update.Message != nil && update.Message.Text == "/start"
}

func isCallbackQuery(update *tgbotapi.Update) bool {
	return update.CallbackQuery != nil && update.CallbackQuery.Data != ""
}

func delay(seconds uint8) {
	time.Sleep(time.Second * time.Duration(seconds))
}

func sendStringMessage(msg string) {
	gBot.Send(tgbotapi.NewMessage(gChatId, msg))
}

func sendMessageWithDelay(delayInSec uint8, message string) {
	sendStringMessage(message)
	delay(delayInSec)
}

func printIntro(update *tgbotapi.Update) {
	sendMessageWithDelay(1, "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É –∏ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ —Å–µ–±–µ, —á—Ç–æ –∑–Ω–∞—á–∏—Ç —É—á–∏—Ç—å—Å—è –≤ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–º –º–µ—Å—Ç–µ.. –í –ö–¢–°...")
	sendMessageWithDelay(3, EMOJI_ANGRY)
	sendMessageWithDelay(7, "–ó–¥–µ—Å—å —Ç—ã –Ω–∞—É—á–∏—à—å—Å—è –∂–∏–∑–Ω–∏, –∞ –º–æ–∂–µ—Ç –¥–∞–∂–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é. –î–∞, —Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ—á—ë–ª: –∂–∏–∑–Ω–∏. –ö–∞–∫ —Å–ø–∏—Å–∞—Ç—å, –ø—Ä–æ–≥—É–ª—è—Ç—å, –≤ —Ü–µ–ª–æ–º –∂–∏—Ç—å 4 –≥–æ–¥–∞ –≤ —Å–≤–æ—ë —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –∏ –±—ã—Ç—å –Ω–µ–ø–æ–π–º–∞–Ω–Ω—ã–º –∑–∞ —Ä—É–∫—É!")
	sendMessageWithDelay(1, EMOJI_WOW)
	sendMessageWithDelay(5, "–í —ç—Ç–æ–π –º–∏–Ω–∏-–∏–≥—Ä–µ, –≤–∑–≤–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π, —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å 2 –ø—É—Ç–∏: –±—ã—Ç—å '—ç—Ç–æ –±—Ä—É–∫–ª–∏–Ω, –º—É—Å–æ..' –∏–ª–∏ '—á—ë –∑–∞ –±–∏–∑–Ω–µ—Å'.")
	sendMessageWithDelay(1, EMOJI_SMILE)
	sendMessageWithDelay(7, `–ù–∞ –≤—ã–±–æ—Ä —É —Ç–µ–±—è –µ—Å—Ç—å 2 –ø—É–Ω–∫—Ç–∞: '–°–æ–≤–µ—Ä—à–∏—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ (–ø–æ–ª–µ–∑–Ω–æ–µ –∏–ª–∏ –Ω–µ –æ—á–µ–Ω—å)' –∏ '–ö—É–ø–∏—Ç—å —á—Ç–æ-—Ç–æ'. –ü–æ–∫—É–ø–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∑–∞ –æ—á–∫–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏üôå, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –≤–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π!`)
	sendMessageWithDelay(1, EMOJI_REP)
	sendMessageWithDelay(10, `–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ç—ã –≤—ã–±—Ä–∞–ª –ø—É—Ç—å '—ç—Ç–æ –±—Ä—É–∫–ª–∏–Ω, –º—É—Å–æ..', –º–æ–∂–µ—à—å –ø—Ä–æ–≥—É–ª—è—Ç—å –ø–∞—Ä—É, –ø–æ—Ç—Ä–∞—Ç–∏–≤ 80 –º–∏–Ω—É—Ç –∏ –ø–æ–ª—É—á–∏—Ç—å –∑–∞ —ç—Ç–æ 5 –æ—á–∫–æ–≤ —Ä–µ—Å–ø–µ–∫—Ç–∞! –ï—Å–ª–∏ –∂–µ —Ç—ã –≤—ã–±—Ä–∞–ª –ø—É—Ç—å '—á—ë –∑–∞ –±–∏–∑–Ω–µ—Å', —Ç–æ —Å–º–æ–∂–µ—à—å —Å—Ö–æ–¥–∏—Ç—å –Ω–∞ –∫—É—Ä—Å—ã –ø–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É, –ø–æ–ª—É—á–∏–≤ —Ç–µ–º —Å–∞–º—ã–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—â–∏–∫–∞ —Å–∞–π—Ç–æ–≤' –∏ 3 –æ—á–∫–∞ —Ä–µ—Å–ø–µ–∫—Ç–∞!`)
	sendMessageWithDelay(3, `–í–æ—Ç –∏ –≤—Å—ë! –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–≤–æ–π –≤–∫—É—Å –∏ –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—É—Ç–∏, —Ç—Ä–∞—Ç—å –æ—á–∫–∏ —Ä–µ—Å–ø–µ–∫—Ç–∞ –Ω–∞ –¥—Ä–æ–ø –∏ —Ä–∞–∑–≤–ª–µ–∫–∞–π—Å—è!`)
	sendMessageWithDelay(1, EMOJI_SUNGLASSES)
}

func getKeyboardRow(buttonText, buttonCode string) []tgbotapi.InlineKeyboardButton {
	return tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData(buttonText, buttonCode))
}

func askToPrintIntro() {
	msg := tgbotapi.NewMessage(gChatId, "–ö–æ—Ä–æ—á–µ, –∏–Ω—Ç—Ä–æ. –•–æ—á–µ—à—å —Å–∫–∏–ø–∞–π, —Ö–æ—á–µ—à—å –Ω–µ—Ç. –°–∫–∏–ø–Ω–µ—à—å - –±—É–¥–µ—à—å —Ç—É–ø–∏—Ç—å, –Ω–µ —Å–∫–∏–ø–Ω–µ—à—å - —É–∑–Ω–∞–µ—à—å –ª–æ—Ä –∏ –∫–∞–∫ –∏–≥—Ä–∞—Ç—å!")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		getKeyboardRow(BUTTON_TEXT_PRINT_INTRO, BUTTON_CODE_PRINT_INTRO),
		getKeyboardRow(BUTTON_TEXT_SKIP_INTRO, BUTTON_CODE_SKIP_INTRO),
	)
	gBot.Send(msg)
}

func showMenu() {
	msg := tgbotapi.NewMessage(gChatId, "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		getKeyboardRow(BUTTON_TEXT_BALANCE, BUTTON_CODE_BALANCE),
		getKeyboardRow(BUTTON_TEXT_USEFUL_ACTIVITIES, BUTTON_CODE_USEFUL_ACTIVITIES),
		getKeyboardRow(BUTTON_TEXT_REWARDS, BUTTON_CODE_REWARDS),
	)
	gBot.Send(msg)
}

func showBalance(user *User) {
	msg := fmt.Sprintf("%s, —Ç–≤–æ—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è –Ω–∞ –Ω—É–ª–µ! %s \n–ó–∞–π–º–∏—Å—å –¥–µ–ª–∞–º–∏, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å +rep", user.name, EMOJI_DOWN)
	if coins := user.coins; coins > 0 {
		msg = fmt.Sprintf("%s, —É —Ç–µ–±—è %d %s", user.name, coins, EMOJI_REP)
	}
	sendStringMessage(msg)
	showMenu()
}

func callbackQueryFromIsMissing(update *tgbotapi.Update) bool {
	return update.CallbackQuery == nil || update.CallbackQuery.From == nil
}

func getUserFromUpdate(update *tgbotapi.Update) (user *User, found bool) {
	if callbackQueryFromIsMissing(update) {
		return
	}

	userId := update.CallbackQuery.From.ID
	for _, userInChat := range gUsersInChat {
		if userId == userInChat.id {
			return userInChat, true
		}
	}
	return
}

func storeUserFromUpdate(update *tgbotapi.Update) (user *User, found bool) {
	if callbackQueryFromIsMissing(update) {
		return
	}

	from := update.CallbackQuery.From
	user = &User{id: from.ID, name: strings.TrimSpace(from.FirstName + " " + from.LastName), coins: 0}
	gUsersInChat = append(gUsersInChat, user)
	return user, true
}

func showActivities(activities Activities, message string, isUseful bool) {
	activitiesButtonsRows := make([]([]tgbotapi.InlineKeyboardButton), 0, len(activities)+1)
	for _, activity := range activities {
		activityDescription := ""
		if isUseful {
			activityDescription = fmt.Sprintf("+ %d %s: %s", activity.coins, EMOJI_REP, activity.name)
		} else {
			activityDescription = fmt.Sprintf("- %d %s: %s", activity.coins, EMOJI_REP, activity.name)
		}
		activitiesButtonsRows = append(activitiesButtonsRows, getKeyboardRow(activityDescription, activity.code))
	}
	activitiesButtonsRows = append(activitiesButtonsRows, getKeyboardRow(BUTTON_TEXT_PRINT_MENU, BUTTON_CODE_PRINT_MENU))

	msg := tgbotapi.NewMessage(gChatId, message)
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(activitiesButtonsRows...)
	gBot.Send(msg)
}

func showUsefulActivities() {
	showActivities(gUsefulActivities, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∏–¥–∏ –¥–æ–º–æ–π", true)
}

func showRewards() {
	showActivities(gRewards, "–í—ã–±–µ—Ä–∏ –Ω–∞–≥—Ä–∞–¥—É –∏–ª–∏ –∏–¥–∏ –¥–æ–º–æ–π", false)
}

func findActivity(activities Activities, choiceCode string) (activity *Activity, found bool) {
	for _, activity := range activities {
		if choiceCode == activity.code {
			return activity, true
		}
	}
	return
}

func processUsefulActivity(activity *Activity, user *User) {
	errorMsg := ""
	if activity.coins == 0 {
		errorMsg = fmt.Sprintf(`–¥–µ–ª–æ "%s" —Å—Ç–æ–ª—å–∫–æ –Ω–µ —Å—Ç–æ–∏—Ç`, activity.name)
	} else if user.coins+activity.coins > MAX_USER_COINS {
		errorMsg = fmt.Sprintf("—É —Ç–µ–±—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ %d %s", MAX_USER_COINS, EMOJI_REP)
	}

	resultMessage := ""
	if errorMsg != "" {
		resultMessage = fmt.Sprintf("%s, –±—Ä–∞—Ç–∞–Ω—á–∏–∫, —Å–æ—Ä—è–Ω, –∫–æ–Ω–µ—á–Ω–æ, –Ω–æ %s %s —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —á—ë—Ç..", user.name, errorMsg, EMOJI_SAD)
	} else {
		user.coins += activity.coins
		resultMessage = fmt.Sprintf(`%s, "%s" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! %d %s —Ä–µ—Å–ø–µ–∫—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ. %s%s –°–µ–π—á–∞—Å —É—Ç–µ–±—è %d %s`,
			user.name, activity.name, activity.coins, EMOJI_REP, EMOJI_BICEPS, EMOJI_SUNGLASSES, user.coins, EMOJI_REP)
	}
	sendStringMessage(resultMessage)
}

func processReward(activity *Activity, user *User) {
	errorMsg := ""
	if activity.coins == 0 {
		errorMsg = fmt.Sprintf(`–ù–∞–≥—Ä–∞–¥–∞ "%s" –¥–æ—Ä–æ–∂–µ!`, activity.name)
	} else if user.coins < activity.coins {
		errorMsg = fmt.Sprintf(`—É —Ç–µ–±—è –µ—Å—Ç—å %d %s. –¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–æ–∑–≤–æ–ª–∏—Ç—å "%s" –∑–∞ %d %s`, user.coins, EMOJI_REP, activity.name, activity.coins, EMOJI_REP)
	}

	resultMessage := ""
	if errorMsg != "" {
		resultMessage = fmt.Sprintf("%s –±—Ä–∞—Ç–∞–Ω—á–∏–∫, —Å–æ—Ä—è–Ω, –∫–æ–Ω–µ—á–Ω–æ, –Ω–æ %s %s —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —á—ë—Ç %s", user.name, errorMsg, EMOJI_SAD, EMOJI_DOWN)
	} else {
		user.coins -= activity.coins
		resultMessage = fmt.Sprintf(`%s, –¥–µ—Ä–∂–∏ –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ "%s"! %d %s –ø–æ—Ç—Ä–∞—á–µ–Ω–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏, —Ç–µ–ø–µ—Ä—å —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å: %d %s`, user.name, activity.name, activity.coins, EMOJI_REP, user.coins, EMOJI_REP)
	}
	sendStringMessage(resultMessage)
}

func updateProcessing(update *tgbotapi.Update) {
	user, found := getUserFromUpdate(update)
	if !found {
		if user, found = storeUserFromUpdate(update); !found {
			sendStringMessage("Unable to identify the user")
			return
		}
	}

	choiceCode := update.CallbackQuery.Data
	log.Printf("[%T] %s", time.Now(), choiceCode)

	switch choiceCode {
	case BUTTON_CODE_BALANCE:
		showBalance(user)
	case BUTTON_CODE_USEFUL_ACTIVITIES:
		showUsefulActivities()
	case BUTTON_CODE_REWARDS:
		showRewards()
	case BUTTON_CODE_PRINT_INTRO:
		printIntro(update)
		showMenu()
	case BUTTON_CODE_SKIP_INTRO:
		showMenu()
	case BUTTON_CODE_PRINT_MENU:
		showMenu()
	default:
		if usefulActivity, found := findActivity(gUsefulActivities, choiceCode); found {
			processUsefulActivity(usefulActivity, user)

			delay(2)
			showUsefulActivities()
			return
		}

		if reward, found := findActivity(gRewards, choiceCode); found {
			processReward(reward, user)

			delay(2)
			showRewards()
			return
		}

		log.Printf(`[%T] !!!!!!!!! ERROR: Unknown code "%s"`, time.Now(), choiceCode)
		msg := fmt.Sprintf("%s, I'm sorry, I don't recognize code '%s' %s Please report this error to my creator.", user.name, choiceCode, EMOJI_SAD)
		sendStringMessage(msg)
	}
}

func main() {
	log.Printf("Authorized on account %s", gBot.Self.UserName)

	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = UPDATE_CONFIG_TIMEOUT

	for update := range gBot.GetUpdatesChan(updateConfig) {
		if isCallbackQuery(&update) {
			updateProcessing(&update)
		} else if isStartMessage(&update) {
			log.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)
			gChatId = update.Message.Chat.ID
			askToPrintIntro()
		}
	}
}
